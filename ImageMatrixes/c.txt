  1 +// the following functions are based off of the pseudocode 
  2 +// found on www.easyrgb.com 
  3 +
 
  4 +function lab2rgb(lab){ 
  5 +  var y = (lab[0] + 16) / 116, 
  6 +      x = lab[1] / 500 + y, 
  7 +      z = y - lab[2] / 200, 
  8 +      r, g, b; 
  9 +
 
 10 +  x = 0.95047 * ((x * x * x > 0.008856) ? x * x * x : (x - 16/116) / 7.787); 
 11 +  y = 1.00000 * ((y * y * y > 0.008856) ? y * y * y : (y - 16/116) / 7.787); 
 12 +  z = 1.08883 * ((z * z * z > 0.008856) ? z * z * z : (z - 16/116) / 7.787); 
 13 +
 
 14 +  r = x *  3.2406 + y * -1.5372 + z * -0.4986; 
 15 +  g = x * -0.9689 + y *  1.8758 + z *  0.0415; 
 16 +  b = x *  0.0557 + y * -0.2040 + z *  1.0570; 
 17 +
 
 18 +  r = (r > 0.0031308) ? (1.055 * Math.pow(r, 1/2.4) - 0.055) : 12.92 * r; 
 19 +  g = (g > 0.0031308) ? (1.055 * Math.pow(g, 1/2.4) - 0.055) : 12.92 * g; 
 20 +  b = (b > 0.0031308) ? (1.055 * Math.pow(b, 1/2.4) - 0.055) : 12.92 * b; 
 21 +
 
 22 +  return [Math.max(0, Math.min(1, r)) * 255,  
 23 +          Math.max(0, Math.min(1, g)) * 255,  
 24 +          Math.max(0, Math.min(1, b)) * 255] 
 25 +} 
 26 +
 
 27 +
 
 28 +function rgb2lab(rgb){ 
 29 +  var r = rgb[0] / 255, 
 30 +      g = rgb[1] / 255, 
 31 +      b = rgb[2] / 255, 
 32 +      x, y, z; 
 33 +
 
 34 +  r = (r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92; 
 35 +  g = (g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92; 
 36 +  b = (b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92; 
 37 +
 
 38 +  x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047; 
 39 +  y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.00000; 
 40 +  z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883; 
 41 +
 
 42 +  x = (x > 0.008856) ? Math.pow(x, 1/3) : (7.787 * x) + 16/116; 
 43 +  y = (y > 0.008856) ? Math.pow(y, 1/3) : (7.787 * y) + 16/116; 
 44 +  z = (z > 0.008856) ? Math.pow(z, 1/3) : (7.787 * z) + 16/116; 
 45 +
 
 46 +  return [(116 * y) - 16, 500 * (x - y), 200 * (y - z)] 
 47 +} 
 48 +
 
 49 +// calculate the perceptual distance between colors in CIELAB 
 50 +// https://github.com/THEjoezack/ColorMine/blob/master/ColorMine/ColorSpaces/Comparisons/Cie94Comparison.cs 
 51 +
 
 52 +function deltaE(labA, labB){ 
 53 +  var deltaL = labA[0] - labB[0]; 
 54 +  var deltaA = labA[1] - labB[1]; 
 55 +  var deltaB = labA[2] - labB[2]; 
 56 +  var c1 = Math.sqrt(labA[1] * labA[1] + labA[2] * labA[2]); 
 57 +  var c2 = Math.sqrt(labB[1] * labB[1] + labB[2] * labB[2]); 
 58 +  var deltaC = c1 - c2; 
 59 +  var deltaH = deltaA * deltaA + deltaB * deltaB - deltaC * deltaC; 
 60 +  deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH); 
 61 +  var sc = 1.0 + 0.045 * c1; 
 62 +  var sh = 1.0 + 0.015 * c1; 
 63 +  var deltaLKlsl = deltaL / (1.0); 
 64 +  var deltaCkcsc = deltaC / (sc); 
 65 +  var deltaHkhsh = deltaH / (sh); 
 66 +  var i = deltaLKlsl * deltaLKlsl + deltaCkcsc * deltaCkcsc + deltaHkhsh * deltaHkhsh; 
 67 +  return i < 0 ? 0 : Math.sqrt(i); 
 68 +} 
